services:
  db:
    image: postgres:16
    restart: always
    container_name: 1337b04rd-postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio
    container_name: minio
    command: server --console-address ":9001" /data
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY}
    volumes:
      - minio-data:/data
    restart: unless-stopped

  minio-init:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      until mc alias set local http://minio:9000 ${S3_ACCESS_KEY} ${S3_SECRET_KEY}; do
        echo 'Waiting for MinIO to be ready...'
        sleep 3
      done;
      mc mb -p local/${S3_BUCKET_THREADS};
      mc mb -p local/${S3_BUCKET_COMMENTS};
      mc admin policy create local public-upload /policy/public-upload.json;
      mc anonymous set public local/${S3_BUCKET_THREADS};
      mc anonymous set public local/${S3_BUCKET_COMMENTS};
      exit 0;
      "      
    volumes:
      - ./policy:/policy:ro
    restart: on-failure

  app:
    build: .
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_started
    ports:
      - "${PORT:-8080}:8080"
    environment:
      PORT: ${PORT}
      DB_HOST: db
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_SSLMODE: ${DB_SSLMODE}
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_BUCKET_THREADS: ${S3_BUCKET_THREADS}
      S3_BUCKET_COMMENTS: ${S3_BUCKET_COMMENTS}
      S3_REGION: ${S3_REGION}
      S3_USE_SSL: ${S3_USE_SSL}
      SESSION_COOKIE_NAME: ${SESSION_COOKIE_NAME}
      SESSION_DURATION_DAYS: ${SESSION_DURATION_DAYS}
      AVATAR_API_BASE_URL: ${AVATAR_API_BASE_URL}
      APP_ENV: ${APP_ENV}

volumes:
  pgdata:
  minio-data:
